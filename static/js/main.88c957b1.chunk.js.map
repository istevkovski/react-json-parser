{"version":3,"sources":["components/TableItem.js","components/TableList.js","App.js","serviceWorker.js","index.js"],"names":["resolveObject","obj","Object","entries","SubTableItem","props","state","isExpanded","prevProps","this","expanded","setState","isAnyExpanded","onClick","counter","className","item","items","expandedProp","counterHandler","subTable","map","index","push","TableSingleCell","key","createTable","React","Component","TableItem","id","object","table","handleSingle","TableList","expandAll","expandedCounter","closeAllChilden","value","data","dataList","Array","isArray","single","Fragment","processAllInformation","App","handleSendJSON","users","JSON","parse","customJSONRef","current","alert","createRef","fetchData","fetch","then","response","json","ref","placeholder","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.88c957b1.chunk.js","sourcesContent":["import React from 'react';\n\n\nfunction resolveObject(obj) {\n    return Object.entries(obj);\n}\n\nclass SubTableItem extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            isExpanded: false,\n        }\n    }\n\n    componentDidUpdate(prevProps) {\n        if(this.state.isExpanded !== this.props.expanded && this.props.expanded !== prevProps.expanded)\n            this.setState({ isExpanded: this.props.expanded })\n            \n        else if(this.props.isAnyExpanded === true)\n            this.setState({ isExpanded: false })\n    }\n\n    render() {\n        return (\n            <tr>\n                <td\n                    onClick={() => {\n                        this.setState({ isExpanded: !this.state.isExpanded }, () => {\n                            this.props.counter(this.state.isExpanded ? 1 : -1)\n                        })\n                    }}\n                >\n                    <div className=\"expandable\">\n                        {this.props.item[0]}\n                        {\n                            this.state.isExpanded ?\n                            <span>-</span>\n                            :\n                            <span>+</span>\n                        }\n                    </div>\n                </td>\n                <td>\n                    {\n                        <>\n                        <table className={this.state.isExpanded ? null : 'hide'}>\n                            <tbody>\n                                { createTable(resolveObject(this.props.item[1]), this.props.expanded, this.props.counter, this.props.isAnyExpanded) }\n                            </tbody>\n                        </table>\n                        <span className={this.state.isExpanded ? 'hide' : null} >...</span>\n                        </>\n                    }\n                </td>\n            </tr>\n    )};\n}\n\nfunction createTable(items, expandedProp, counterHandler, isAnyExpanded) {\n    let subTable = [];\n\n    items.map((item, index) => {\n        if ( typeof item[1] === 'string' || typeof item[1] === 'number') {\n            subTable.push(<TableSingleCell item={item} key={`sC${index}`}/>);\n        }\n\n        else if (typeof item[1] === 'object') {\n            subTable.push(\n                <SubTableItem\n                    item={item}\n                    key={`sT${index}`}\n                    expanded={expandedProp}\n                    isAnyExpanded={isAnyExpanded}\n                    counter={counterHandler}/>\n            );\n        }\n    });\n    \n    return subTable;\n}\n\nfunction TableSingleCell(props) {\n    return(\n        <tr className=\"table-item\">\n            <td>{props.item[0]}</td>\n            <td>{props.item[1]}</td>\n        </tr>\n    )\n}\n\nfunction handleSingle(obj, props) {\n    let object = resolveObject(obj);\n    let table = [];\n\n    object.map((item, index) => {\n        if ( typeof item[1] === 'string' || typeof item[1] === 'number') {\n            table.push(\n                <TableSingleCell item={item} key={`sC${index}`}/>\n            );\n        }\n\n        else if (typeof item[1] === 'object') {\n            table.push(\n                <SubTableItem item={item} key={`sT${index}`} expanded={props.expanded} isAnyExpanded={props.isAnyExpanded} counter={props.counter}/>\n            );\n        }\n    });\n\n    return table;\n}\n\nexport default function TableItem(props) {\n    return(\n        <table>\n            <tbody id=\"table-body\">\n                {handleSingle(props.table, props)}\n            </tbody>\n        </table>\n    );\n}\n\n","import React from 'react'\nimport TableItem from './TableItem';\n\nimport './Table.css'\n\n\nexport default class TableList extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            expanded: false,\n            expandedCounter: 0,\n            closeAllChilden: false\n        }\n    }\n\n\texpandAll = () => {\n        if(this.state.expandedCounter > 0 || this.state.expanded === true)\n            this.setState({ closeAllChilden: true }, () => {\n                this.setState({expanded: false, closeAllChilden: false, expandedCounter: 0})\n            });\n        else if (this.state.expandedCounter <= 0 && this.state.expanded === false) this.setState({ expanded: true, expandedCounter: 1});\n    }\n\n    counterHandler = (value) => {\n        this.setState({ expandedCounter: this.state.expandedCounter + value})\n    }\n\n    processAllInformation(data = this.props.dataList) {\n        if (!Array.isArray(data)) data = [data];\n        return data.map((single, index) => {\n            if (typeof single === 'object')\n                return(\n                    <TableItem\n                        table={single}\n                        key={`rT${index}`}\n                        expanded={this.state.expanded}\n                        isAnyExpanded={this.state.closeAllChilden}\n                        counter={this.counterHandler}/>\n                );\n        });\n    }\n\n    render() {\n        return(\n            <React.Fragment>\n                <button className='expand' onClick={this.expandAll}>\n                    {(() => {\n                        if(this.state.expandedCounter > 0 || this.state.expanded === true)\n                            return 'Collapse All'\n                        else return 'Expand All'\n                    })()}\n                </button>\n                { this.processAllInformation() }\n            </React.Fragment>\n    )};\n}\n","import React from 'react';\nimport TableList from './components/TableList';\nimport './App.css';\n\nclass App extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = { users: [] }\n\n\t\tthis.customJSONRef = React.createRef();\n\t}\n\n\tcomponentDidMount() { this.fetchData() };\n\n\tasync fetchData() {\n\t\tawait fetch('https://jsonplaceholder.typicode.com/users')\n\t\t\t.then(response => response.json())\n\t\t\t.then(data => this.setState({ users: data }));\n\t};\n\n\thandleSendJSON = () => {\n\t\ttry {\n\t\t\tthis.setState({ users: JSON.parse(this.customJSONRef.current.value)})\n\t\t} catch {\n\t\t\talert('JSON NOT VALID');\n\t\t\treturn false;\n\t\t}\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<div className=\"json-input\">\n\t\t\t\t\t<textarea\n\t\t\t\t\t\tref={this.customJSONRef}\n\t\t\t\t\t\tplaceholder=\"Enter custom JSON here\"\n\t\t\t\t\t></textarea>\n\t\t\t\t\t<button onClick={this.handleSendJSON}>Send</button>\n\t\t\t\t</div>\n\t\t\t\t<TableList dataList={this.state.users}/>\n\t\t\t</>\n\t\t)\n\t};\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}