{"version":3,"sources":["components/TableItem.js","components/TableList.js","App.js","serviceWorker.js","index.js"],"names":["resolveObject","obj","Object","entries","SubTableItem","props","useState","isExpanded","setIsExpanded","expanded","useEffect","onClick","className","item","items","expandedProp","subTable","map","index","push","TableSingleCell","key","createTable","TableItem","id","object","table","handleSingle","defaultProps","TableList","setExpanded","Fragment","data","dataList","single","processAllInformation","App","users","setUsers","customJSONRef","React","useRef","a","fetch","then","response","json","fetchData","ref","e","JSON","parse","current","value","alert","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e1d2fb3f.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react';\n\n\nfunction resolveObject(obj) {\n    return Object.entries(obj);\n}\n\nfunction SubTableItem(props) {\n    const [isExpanded, setIsExpanded] = useState(false);\n    const expanded = props.expanded;\n\n    useEffect(() => {\n        setIsExpanded(expanded);\n    }, [expanded]);\n\n    return (\n        <tr>\n            <td\n                onClick={() => setIsExpanded(!isExpanded)}\n            >\n                <div className=\"expandable\">\n                    {props.item[0]}\n                    {\n                        isExpanded ?\n                        <span>-</span>\n                        :\n                        <span>+</span>\n                    }\n                </div>\n            </td>\n            <td>\n                {\n                    <>\n                    <table className={isExpanded ? null : 'hide'}>\n                        <tbody>\n                            { createTable(resolveObject(props.item[1]), expanded) }\n                        </tbody>\n                    </table>\n                    <span className={isExpanded ? 'hide' : null} >...</span>\n                    </>\n                }\n            </td>\n        </tr>\n    );\n}\n\nSubTableItem.defaultProps = {\n    expanded: false\n}\n\nfunction createTable(items, expandedProp) {\n    let subTable = [];\n\n    items.map((item, index) => {\n        if ( typeof item[1] === 'string' || typeof item[1] === 'number') {\n            subTable.push(<TableSingleCell item={item} key={`sC${index}`}/>);\n        }\n\n        else if (typeof item[1] === 'object') {\n            subTable.push(\n                <SubTableItem item={item} key={`sT${index}`} expanded={expandedProp}/>\n            );\n        }\n    });\n\n    return subTable;\n}\n\nfunction handleSingle(obj, props) {\n    let object = resolveObject(obj);\n    let table = [];\n\n    object.map((item, index) => {\n        if ( typeof item[1] === 'string' || typeof item[1] === 'number') {\n            table.push(\n                <TableSingleCell item={item} key={`sC${index}`}/>\n            );\n        }\n\n        if (typeof item[1] === 'object') {\n            table.push(\n                <SubTableItem item={item} key={`sT${index}`} expanded={props.expanded}/>\n            );\n        }\n    });\n\n    return table;\n}\n\nfunction TableSingleCell(props) {\n    return(\n        <tr className=\"table-item\">\n            <td>{props.item[0]}</td>\n            <td>{props.item[1]}</td>\n        </tr>\n    )\n}\n\nexport default function TableItem(props) {\n    return(\n        <table>\n            <tbody id=\"table-body\">\n                {handleSingle(props.table, props)}\n            </tbody>\n        </table>\n    );\n}\n\n","import React, { useState } from 'react'\nimport TableItem from './TableItem';\n\nimport './Table.css'\n\nexport default function TableList(props) {\n    const [expanded, setExpanded] = useState(false);\n\n\tconst expandAll = () => {\n\t\tsetExpanded(!expanded);\n\t}\n\n    function processAllInformation(data = props.dataList) {\n        return data.map((single, index) => {\n            if (typeof single === 'object')\n                return <TableItem table={single} key={`rT${index}`} expanded={expanded}/>;\n        });\n    }\n\n    return(\n        <React.Fragment>\n            <button className='expand' onClick={expandAll}>{expanded ? 'Collapse All' : 'Expand All'}</button>\n            { processAllInformation() }\n        </React.Fragment>\n    );\n}\n","import React, { useEffect, useState } from 'react';\nimport TableList from './components/TableList';\nimport './App.css';\n\nfunction App () {\n\tconst [users, setUsers] = useState([]);\n\tconst customJSONRef = React.useRef();\n\n\tuseEffect(() => {\n\t\tasync function fetchData() {\n\t\t\tawait fetch('https://jsonplaceholder.typicode.com/users')\n\t\t\t\t.then(response => response.json())\n\t\t\t\t.then(data => setUsers(data));\n\t\t}\n\n\t\tfetchData();\n\t}, [setUsers])\n\n\tfunction handleSendJSON(e) {\n\n\t\ttry {\n\t\t\tsetUsers(JSON.parse(customJSONRef.current.value));\n\t\t} catch (e) {\n\t\t\talert('JSON NOT VALID');\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn (\n\t\t<>\n\t\t\t<div className=\"json-input\">\n\t\t\t\t<textarea\n\t\t\t\t\tref={customJSONRef}\n\t\t\t\t></textarea>\n\t\t\t\t<button onClick={handleSendJSON}>Send</button>\n\t\t\t</div>\n\t\t\t<TableList dataList={users}/>\n\t\t</>\n\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\t<React.StrictMode>\n\t\t<App />\n\t</React.StrictMode>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}